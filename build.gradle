buildscript {
	dependencies {
		classpath 'com.guardsquare:proguard-gradle:' + (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11) ? '7.2.0-beta2' : '7.1.0')
	}
}
plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
	id 'maven-publish'
	id 'flint-steel' version '0.1.0' apply false
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'com.diffplug.spotless' version "6.23.3"
}

archivesBaseName = "punch"
def ENV = System.getenv()

allprojects {
	apply plugin: 'java-library'
	apply plugin: 'eclipse'
	apply plugin: "com.diffplug.spotless"

	def constantsSource = rootProject.file("src/main/java/net/flintloader/punch/impl/PunchLoaderImpl.java").text
	version = (constantsSource =~ /\s+VERSION\s*=\s*"(.*)";/)[0][1]

	repositories {
		maven {
			name = 'Flint Releases'
			url = 'https://maven.flintloader.net/releases'
		}
		maven {
			name = 'Flint Mirror'
			url = 'https://maven.flintloader.net/mirror'
		}
		mavenCentral() {
			content {
				// Force ASM to come from the flint maven.
				// This ensures that the ASM version has been mirrored for use by the launcher/installer.
				excludeGroupByRegex "org.ow2.asm"
			}
		}
	}

	dependencies {
		compileOnly 'org.jetbrains:annotations:23.0.0'
	}
}

sourceSets {
	main {
		java.srcDirs = ['src/main/java', 'src/main/legacyJava']
	}
}

configurations {
	include

	implementation {
		extendsFrom include
	}
}

dependencies {
	// punch dependencies
	api "org.ow2.asm:asm:${project.asm_version}"
	api "org.ow2.asm:asm-analysis:${project.asm_version}"
	api "org.ow2.asm:asm-commons:${project.asm_version}"
	api "org.ow2.asm:asm-tree:${project.asm_version}"
	api "org.ow2.asm:asm-util:${project.asm_version}"

	api("net.fabricmc:sponge-mixin:${project.mixin_version}") {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	api 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
	api 'net.fabricmc:tiny-remapper:0.10.1'
	api 'net.fabricmc:access-widener:2.1.0'

	include 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.6'
	include 'org.ow2.sat4j:org.ow2.sat4j.pb:2.3.6'

	include 'com.vdurmont:semver4j:3.1.0'
}

processResources {
	inputs.property "version", project.version

	filesMatching("flint.module.json") {
		expand "version": project.version
	}
}

java {
	withSourcesJar()
}

jar {
	enabled = false
	// Set the classifier to fix gradle task validation confusion.
	archiveClassifier = "disabled"
}

shadowJar {
	// Has stupid defaults, make our own
	enabled = false
}


import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import proguard.gradle.ProGuardTask

// Renaming in the shadow jar task doesnt seem to work, so do it here
task getSat4jAbout(type: Copy) {
	dependsOn project.configurations.include
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
		configurations.include.collect {
			zipTree(it).matching {
				include 'about.html'
			}
		}
	}

	rename 'about.html', 'net/flintloader/punch/impl/lib/sat4j/about-sat4j.html'

	into layout.buildDirectory.dir("sat4j")
}

task fatJar(type: ShadowJar, dependsOn: getSat4jAbout) {
	from sourceSets.main.output
	from project(":minecraft").sourceSets.main.output
	from getSat4jAbout.destinationDir
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	archiveClassifier = "fat"
	configurations = [project.configurations.include]

	relocate 'org.sat4j', 'net.flintloader.punch.impl.lib.sat4j'

	exclude 'about.html'
	exclude 'sat4j.version'
	exclude 'META-INF/maven/org.ow2.sat4j/*/**'

	outputs.upToDateWhen { false }
}

File proguardFile = file("build/libs/punch-${version}.jar")

task proguardJar(type: ProGuardTask, dependsOn: fatJar) {
	def classpath = project(":minecraft").configurations.compileClasspath

	inputs.files(fatJar, classpath)
	outputs.files(proguardFile)

	doFirst {
		classpath.resolve().forEach {
			libraryjars it
		}
	}

	libraryjars JavaVersion.current().java9Compatible ? "${System.getProperty('java.home')}/jmods" : "${System.getProperty('java.home')}/lib/rt.jar"

	injars fatJar.archiveFile
	outjars proguardFile
	configuration file("proguard.conf")
}
build.dependsOn proguardJar

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

sourcesJar {
	from sourceSets.main.allSource
	from project(":minecraft").sourceSets.main.allSource
}

task copyJson() {
	def inJson = file('src/main/resources/flint-installer.json')
	def outJson = file("build/libs/${archivesBaseName}-${version}.json")

	inputs.files (inJson)
	outputs.files(outJson)

	doLast {
		outJson.text = inJson.text
	}
}

tasks.build.dependsOn "copyJson"

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	source sourceSets.main.allJava.srcDirs
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
	include("**/api/**")
	// workaround as one of the api stuff use that package
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	archiveClassifier = 'javadoc'
}

build.dependsOn javadocJar

allprojects {
	spotless {
		java {
			licenseHeaderFile(rootProject.file("HEADER"))
			targetExclude '**/lib/gson/*.java'
		}
	}
}

// Causes more trouble than its worth
tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(proguardFile) {
				builtBy(proguardJar)
				classifier = null
			}
			artifact(sourcesJar)
			artifact javadocJar
			artifact(file('src/main/resources/flint-installer.json')) {
				builtBy copyJson
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		maven {
			url "https://maven.flintloader.net/releases"
			credentials {
				username System.getenv("MAVEN_USER")
				password System.getenv("MAVEN_PASS")
			}
		}
	}
}
